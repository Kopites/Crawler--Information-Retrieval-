 Navigation Panel Next: An example information retrieval Up: irbook Previous: Web and contact information   Contents   Index End of Navigation Panel Boolean retrieval The meaning of the term information retrieval can be very broad. Just getting a credit card out of your wallet so that you can type in the card number is a form of information retrieval. However, as an academic field of study, information retrieval might be defined thus: Information retrieval (IR) is finding material (usually documents) of an unstructured nature (usually text) that satisfies an information need from within large collections (usually stored on computers). As defined in this way, information retrieval used to be an activity that only a few people engaged in: reference librarians, paralegals, and similar professional searchers. Now the world has changed, and hundreds of millions of people engage in information retrieval every day when they use a web search engine or search their email.Information retrieval is fast becoming the dominant form of information access, overtaking traditional database-style searching (the sort that is going on when a clerk says to you: ``I'm sorry, I can only look up your order if you can give me your Order ID''). IR can also cover other kinds of data and information problems beyond that specified in the core definition above. The term ``unstructured data'' refers to data which does not have clear, semantically overt, easy-for-a-computer structure. It is the opposite of structured data, the canonical example of which is a relational database, of the sort companies usually use to maintain product inventories and personnel records. In reality, almost no data are truly ``unstructured''. This is definitely true of all text data if you count the latent linguistic structure of human languages. But even accepting that the intended notion of structure is overt structure, most text has structure, such as headings and paragraphs and footnotes, which is commonly represented in documents by explicit markup (such as the coding underlying web pages). IR is also used to facilitate ``semistructured'' search such as finding a document where the title contains Java and the body contains threading. The field of information retrieval also covers supporting users in browsing or filtering document collections or further processing a set of retrieved documents. Given a set of documents, clustering is the task of coming up with a good grouping of the documents based on their contents. It is similar to arranging books on a bookshelf according to their topic. Given a set of topics, standing information needs, or other categories (such as suitability of texts for different age groups), classification is the task of deciding which class(es), if any, each of a set of documents belongs to. It is often approached by first manually classifying some documents and then hoping to be able to classify new documents automatically. Information retrieval systems can also be distinguished by the scale at which they operate, and it is useful to distinguish three prominent scales. In web search , the system has to provide search over billions of documents stored on millions of computers. Distinctive issues are needing to gather documents for indexing, being able to build systems that work efficiently at this enormous scale, and handling particular aspects of the web, such as the exploitation of hypertext and not being fooled by site providers manipulating page content in an attempt to boost their search engine rankings, given the commercial importance of the web. We focus on all these issues in webcharlink. At the other extreme is personal information retrieval . In the last few years, consumer operating systems have integrated information retrieval (such as Apple's Mac OS X Spotlight or Windows Vista's Instant Search). Email programs usually not only provide search but also text classification: they at least provide a spam (junk mail) filter, and commonly also provide either manual or automatic means for classifying mail so that it can be placed directly into particular folders. Distinctive issues here include handling the broad range of document types on a typical personal computer, and making the search system maintenance free and sufficiently lightweight in terms of startup, processing, and disk space usage that it can run on one machine without annoying its owner. In between is the space of enterprise, institutional, and domain-specific search , where retrieval might be provided for collections such as a corporation's internal documents, a database of patents, or research articles on biochemistry. In this case, the documents will typically be stored on centralized file systems and one or a handful of dedicated machines will provide search over the collection. This book contains techniques of value over this whole spectrum, but our coverage of some aspects of parallel and distributed search in web-scale search systems is comparatively light owing to the relatively small published literature on the details of such systems. However, outside of a handful of web search companies, a software developer is most likely to encounter the personal search and enterprise scenarios. In this chapter we begin with a very simple example of an information retrieval problem, and introduce the idea of a term-document matrix (Section 1.1 ) and the central inverted index data structure (Section 1.2 ). We will then examine the Boolean retrieval model and how Boolean queries are processed ( and 1.4 ). Table of Child-Links Subsections An example information retrieval problem A first take at building an inverted index Processing Boolean queries The extended Boolean model versus ranked retrieval References and further reading End of Table of Child-Links Navigation Panel Next: An example information retrieval Up: irbook Previous: Web and contact information   Contents   Index End of Navigation Panel © 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book. 2009-04-07 
 Stack Exchange sign up | log in | careers 2.0 | Stack Overflow Questions Tags Tour Users Ask Question googleoff: all Tell me more × Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free, no registration required. $('#tell-me-more').click(function () { var clickSource = $("body").attr("class") + '-mini'; if ($("body").hasClass("questions-page")) { clickSource = 'questionpagemini'; } if ($("body").hasClass("home-page")) { clickSource = 'homepagemini'; } StackExchange.using("gps", function () { StackExchange.gps.track("aboutpage.click", { aboutclick_location: clickSource } , true); }); }); $('#herobox-mini #close').click(function () { StackExchange.using("gps", function () { StackExchange.gps.track("hero.action", { hero_action_type: "close" }, true); }); $.cookie("hero", "none", { path: "/" }); var $hero = $("#herobox-mini"); $hero.slideUp('fast', function () { $hero.remove(); }); return false; }); googleon: all Find object by its member inside a List in python var ados = ados || {};ados.run = ados.run || []; ados.run.push(function() { ados_add_placement(22,8277,"adzerk1764785234",4).setZone(43) ; }); up vote 3 down vote favorite lets assume the following simple Object: class Mock: def __init__(self, name, age): self.name = name self.age = age then I have a list with some Objects like this: myList = [Mock("Dan", 34), Mock("Jack", 30), Mock("Oli", 23)...] Is there some built-in feature where I can get all Mocks with an age of ie 30? Of course I can iterate myself over them and compare their ages, but something like find(myList, age=30) would be nice. Is there something like that? python list search find share|improve this question edited Aug 16 at 1:44 marshall.ward 1,3971924 asked Jun 1 '12 at 23:36 Rafael T 4,53821854 4 Answers active oldest votes up vote 10 down vote accepted You could try a filter(): filter(lambda x: x.age == 30, myList) This would return a list with only those objects satisfying the lambda expression. share|improve this answer answered Jun 1 '12 at 23:39 dckrooney 1,421615 1   And if you plan on doing a lookup by this attribute often, you may want to maintain a dict based on the attribute. –  Joel Cornett Jun 1 '12 at 23:43 var ados = ados || {};ados.run = ados.run || []; ados.run.push(function() { ados_add_placement(22,8277,"adzerk593075984",4).setZone(44) ; }); up vote 8 down vote List comprehensions can pick these up: new_list = [x for x in myList if x.age == 30] share|improve this answer answered Jun 1 '12 at 23:40 marshall.ward 1,3971924   nice solution, too, but @dcrooney answer fits more the function. Did anyone compare whats faster? –  Rafael T Jun 1 '12 at 23:48   timeit gives about 0.30 usec for the list comprehension and 0.58 for the lambda filter on my machine. But they are essentially equivalent here, so you should use the one that you prefer. –  marshall.ward Jun 2 '12 at 0:09 1   Some good discussion of the issue here as well: stackoverflow.com/a/1247490/317172 –  marshall.ward Jun 2 '12 at 0:18 up vote 5 down vote You might want to pre-index them - from collections import defaultdict class Mock(object): age_index = defaultdict(list) def __init__(self, name, age): self.name = name self.age = age Mock.age_index[age].append(self) @classmethod def find_by_age(cls, age): return Mock.age_index[age] Edit: a picture is worth a thousand words: X axis is number of Mocks in myList, Y axis is runtime in seconds. red dots are @dcrooney's filter() method blue dots are @marshall.ward's list comprehension green dots hiding behind the X axis are my index ;-) share|improve this answer edited Jun 2 '12 at 1:37 answered Jun 1 '12 at 23:44 Hugh Bothwell 14.4k21531 up vote 4 down vote List comprehensions are almost always the faster way to do these things (2x as fast here), though as mentioned earlier indexing is even faster if you're concerned about speed. ~$ python -mtimeit -s"from mock import myList" "filter(lambda x: x.age==21, myList)" 1000000 loops, best of 3: 1.34 usec per loop ~$ python -mtimeit -s"from mock import myList" "[x for x in myList if x.age==21]" 1000000 loops, best of 3: 0.63 usec per loop For file mock.py in current directory: class Mock: def __init__(self, name, age): self.name = name self.age = age myList = [Mock('Tom', 20), Mock('Dick', 21), Mock('Harry', 21), Mock('John', 22)] share|improve this answer answered Jun 2 '12 at 0:50 Bird Jaguar IV 1,4001018 Your Answer StackExchange.ready(function() { initTagRenderer("".split(" "), "".split(" ")); prepareEditor({ heartbeatType: 'answer', bindNavPrevention: true, postfix: "", onDemand: true, discardSelector: ".discard-answer" ,immediatelyShowMarkdownHelp:true }); });   draft saved draft discarded Sign up or login StackExchange.ready(function () { StackExchange.helpers.onClickDraftSave('#login-link'); }); Sign up using Google Sign up using Facebook Sign up using Stack Exchange Post as a guest StackExchange.ready(function () { StackExchange.helpers.bindHelpOverlayEvents($('.vm input')); }); Name Email required, but not shown StackExchange.ready( function () { StackExchange.openid.initPostLogin('.new-post-login', '%2fquestions%2f10858575%2ffind-object-by-its-member-inside-a-list-in-python%23new-answer'); } ); Post as a guest StackExchange.ready(function () { StackExchange.helpers.bindHelpOverlayEvents($('.vm input')); }); Name Email required, but not shown discard By posting your answer, you agree to the privacy policy and terms of service. Not the answer you're looking for? Browse other questions tagged python list search find or ask your own question. tagged python × 238166 list × 24811 search × 14807 find × 3312 asked 1 year ago viewed 896 times active 2 months ago var ados = ados || {};ados.run = ados.run || []; ados.run.push(function() { ados_add_placement(22,8277,"adzerk1219740067",17).setZone(45) ; }); window.careers_adurl="//careers.stackoverflow.com/gethired/js",window.careers_cssurl="//cdn-careers.sstatic.net/careers/gethired/sidebar.min.css?v=7ae83073b37e",window.careers_leaderboardcssurl="//cdn-careers.sstatic.net/careers/gethired/ninja.min.css?v=78ccbfa5c59f",window.careers_companycssurl="//cdn-careers.sstatic.net/careers/gethired/company",window.careers_adselector="div.hireme, div#hireme",StackExchange.ready(function(){$.ajax({url:"//cdn-careers.sstatic.net/careers/gethired/loader.min.js?v=607ab2dda910",dataType:"script",cache:!0})}) Linked 153 Python List Comprehension Vs. Map Related 247 Finding the index of an item given a list containing it in Python 343 Get the size of a list in python? 4 Python find object in a list 0 Python: Find item in multidimensional list 0 Find a element of a list in a another list in Prolog 4 Fastest way to search a list in python 2 Finding an exact position of a smaller list inside a list (python) 1 Python: How do you chain methods on lists of lists of objects? 1 How to find an object from a list 2 Python: Find starting and ending indices of sublist in list question feed StackExchange.ready(function(){$.get('/posts/10858575/ivc/402e');}); lang-py about help badges blog chat data legal privacy policy jobs advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix & Linux Ask Different (Apple) WordPress Answers Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica more (14) Photography Science Fiction & Fantasy Seasoned Advice (cooking) Home Improvement more (13) English Language & Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow more (7) Stack Apps Meta Stack Overflow Area 51 Stack Overflow Careers site design / logo © 2013 stack exchange inc; user contributions licensed under cc-wiki with attribution required rev 2013.11.12.1148 Stack Overflow works best with JavaScript enabled var p = "http", d = "static"; if (document.location.protocol == "https:") { p += "s"; d = "engine"; } var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = p + "://" + d + ".adzerk.net/ados.js"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s); var ados = ados || {}; ados.run = ados.run || []; ados.run.push(function () { ados_setKeywords('python,list,search,find');; ados_load(); }); var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-5620270-1']); _gaq.push(['_setCustomVar', 1, 'tags', '|python|list|search|find|']); _gaq.push(['_trackPageview']); var _qevents = _qevents || []; var _comscore = _comscore || []; (function () { var ssl='https:'==document.location.protocol, s=document.getElementsByTagName('script')[0], ga=document.createElement('script'); ga.type='text/javascript'; ga.async=true; ga.src=(ssl?'https://ssl':'http://www')+'.google-analytics.com/ga.js'; s.parentNode.insertBefore(ga,s); var sc=document.createElement('script'); sc.type='text/javascript'; sc.async=true; sc.src=(ssl?'https://secure':'http://edge')+'.quantserve.com/quant.js'; s.parentNode.insertBefore(sc, s); var s = document.createElement("script"), el = document.getElementsByTagName("script")[0]; s.async = true; s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js"; el.parentNode.insertBefore(s, el); })(); _comscore.push({ c1: "2", c2: "17440561" }); _qevents.push({ qacct: "p-c1rF4kxgLUzNc" }); 
